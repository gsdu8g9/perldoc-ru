=encoding utf8

=head1 Имя

perl - интерпретатор языка Perl5

=head1 СИНТАКСИС

B<perl>	S<[ B<-sTtuUWX> ]>
	S<[ B<-hv> ] [ B<-V>[:I<configvar>] ]>
	S<[ B<-cw> ] [ B<-d>[B<t>][:I<отладчик>] ] [ B<-D>[I<кол-во/список>] ]>
	S<[ B<-pna> ] [ B<-F>I<шаблон> ] [ B<-l>[I<восьмеричный>] ] [ B<-0>[I<восьмеричный/шестнадцатеричный>] ]>
	S<[ B<-I>I<dir> ] [ B<-m>[B<->]I<модуль> ] [ B<-M>[B<->]I<'модуль...'> ] [ B<-f> ]>
	S<[ B<-C [I<кол-во/список>] >]>
	S<[ B<-S> ]>
	S<[ B<-x>[I<dir>] ]>
	S<[ B<-i>[I<расширение>] ]>
	S<[ [B<-e>|B<-E>] I<'команда'> ] [ B<--> ] [ I<файл программы> ] [ I<аргумент> ]...>

Для получения дополнительной информации на эти параметры, можно запустить C<perldoc perlrun>.

=head1 ПОЛУЧЕНИЕ ПОМОЩИ

F<perldoc> Программа дает вам доступ ко всей документации, которая поставляется с Perl.  Вы можете получить более подробную документацию, руководства и интернет-сообщество поддержки на L<http://www.perl.org/>.

Если вы новичок в Perl, вы должны начать, запустив C<perldoc perlintro>, которая представляет собой общее введение для новичков и дает некоторые базовые навыки, чтобы помочь вам ориентироваться в остальной обширной документации Perl.  Запустите C<perldoc perldoc> чтобы узнать больше возможностей, которые вы можете сделать с F<perldoc> .

Для удобства чтения руководство Perl был разделено на несколько частей.

=begin buildtoc

# Этот паздел парсится  Porting/pod_lib.pl  для использования  pod/buildtoc и т.д.

flag =g  perluniprops perlmodlib perlapi perlintern
flag =go perltoc
flag =ro perlcn perljp perlko perltw
flag =   perlvms

path perlfaq.*               cpan/perlfaq/lib/
path perlglossary            cpan/perlfaq/lib/
path perlxs(?:tut|typemap)?  dist/ExtUtils-ParseXS/lib/
path perldoc                 cpan/Pod-Perldoc/lib/

aux a2p c2ph h2ph h2xs perlbug pl2pm pod2html pod2man s2p splain xsubpp

=end buildtoc

=head2 Обзор

    perl		Perl обзор (этот раздел)
    perlintro		Введение в Perl для начинающих
    perlrun		Выполнение программы на Perl и его опции
    perltoc		Perl документация Оглавление

=head2 Учебники

    perlreftut		Perl краткое введение в ссылки
    perldsc		Perl введение в структуры данных
    perllol		Структуры данных Perl: массивы массивов

    perlrequick 	Регулярные выражения Perl быстрый старт
    perlretut		Perl регулярные выражения учебник

    perlootut		Perl OO учебник для начинающих

    perlperf		Perl Производительность и Методы оптимизации

    perlstyle		Perl руководство по стилю программирования

    perlcheat		Perl шпаргалка
    perltrap		Perl ловушки для неосторожных
    perldebtut		Perl Учебник отладки

    perlfaq		Perl часто задаваемые вопросы
      perlfaq1		Общие вопросы о Perl
      perlfaq2		Получение и изучение Perl
      perlfaq3		Инструменты программирования
      perlfaq4		Манипуляция данными
      perlfaq5		Файлы и форматы
      perlfaq6		Регулярные выражения
      perlfaq7		Проблемы языка Perl
      perlfaq8		Взаимодействие с системой
      perlfaq9		Сети

=head2 Справочное руководство

    perlsyn		Синтаксис Perl
    perldata		Структуры данных Perl
    perlop		Perl операторы и их приоритет
    perlsub		Perl подпрограммы
    perlfunc		Perl встроенные функции
      perlopentut	Perl open() учебник
      perlpacktut	Perl pack() и unpack() учебник
    perlpod		Perl простая старая документация
    perlpodspec 	Perl простая старая документация спецификация формата
    perlpodstyle	Perl POD руководство по стилю
    perldiag		Perl диагностические сообщения
    perllexwarn 	Perl предупреждения и управление ими
    perldebug		Perl отладка
    perlvar		Perl предопределенные переменные
    perlre		Perl регулярные выражения, остальная часть истории
    perlrebackslash	Perl регулярные выражения последовательности с обратным слэшем
    perlrecharclass	Perl регулярные выражения классы символов
    perlreref		Perl регулярные выражения краткий справочник
    perlref		Perl ссылки, остальная часть истории
    perlform		Perl форматы
    perlobj		Perl объекты
    perltie		Perl объекты скрытые за простыми переменными
      perldbmfilter	Perl DBM фильтры

    perlipc		Perl  межпроцессное взаимодействие
    perlfork		Perl fork() информация
    perlnumber		Perl семантики числа

    perlthrtut		Perl потоки учебник

    perlport		Perl руководство по переносимости
    perllocale		Perl языковая поддержка
    perluniintro	Perl введение в Unicode
    perlunicode 	Perl поддержка юникода
    perlunifaq		Perl Unicode FAQ
    perluniprops	Каталог свойств Unicode в Perl
    perlunitut		Perl Unicode учебник
    perlebcdic		Соображения для запуска Perl на EBCDIC платформах

    perlsec		Perl безопасность

    perlmod		Perl модули:как они работают
    perlmodlib		Perl модули: как писать и использовать
    perlmodstyle	Perl модули: правильный стиль написания модулей
    perlmodinstall	Perl модули: как установить из CPAN
    perlnewmod		Perl модули: подготовка нового модуля для опубликования
    perlpragma		Perl модули: написание пользовательской pragma (директивы компилятору)

    perlutil		утилиты, идущие в комплекте с поставкой Perl

    perlfilter		Perl исходные файлы

    perldtrace		Perl's поддержка для DTrace

    perlglossary	Perl Глоссарий

=head2 Внутренности и Язык интерфейса для C

    perlembed		Perl пути для встраивания perl в ваши C или C++ приложения
    perldebguts 	Perl внутренности отлидки и советы
    perlxstut		Perl XS учебник
    perlxs		Perl XS интерфейс прикладного программирования
    perlxstypemap	Perl XS C/Perl инструменты преобразования типов
    perlclib		Внутренние замены для стандартных библиотечных функций C
    perlguts		Perl внутренние функции для тех, кто делает расширения
    perlcall		Perl соглашения о вызове из C
    perlmroapi		Perl method resolution plugin interface
    perlreapi		Perl regular expression plugin interface
    perlreguts		Perl regular expression engine internals

    perlapi		Perl API listing (autogenerated)
    perlintern		Perl internal functions (autogenerated)
    perliol		C API for Perl's implementation of IO in Layers
    perlapio		Perl internal IO abstraction interface

    perlhack		Perl hackers guide
    perlsource		Guide to the Perl source tree
    perlinterp		Overview of the Perl interpreter source and how it works
    perlhacktut 	Walk through the creation of a simple C code patch
    perlhacktips	Tips for Perl core C code hacking
    perlpolicy		Perl development policies
    perlgit		Using git with the Perl repository

=head2 Miscellaneous

    perlbook		Perl book information
    perlcommunity	Perl community information

    perldoc		Look up Perl documentation in Pod format

    perlhist		Perl history records
    perldelta		Perl changes since previous version
    perl5180delta	Perl changes in version 5.18.0
    perl5161delta	Perl changes in version 5.16.1
    perl5162delta	Perl changes in version 5.16.2
    perl5163delta	Perl changes in version 5.16.3
    perl5160delta	Perl changes in version 5.16.0
    perl5144delta	Perl changes in version 5.14.4
    perl5143delta	Perl changes in version 5.14.3
    perl5142delta	Perl changes in version 5.14.2
    perl5141delta	Perl changes in version 5.14.1
    perl5140delta	Perl changes in version 5.14.0
    perl5125delta	Perl changes in version 5.12.5
    perl5124delta	Perl changes in version 5.12.4
    perl5123delta	Perl changes in version 5.12.3
    perl5122delta	Perl changes in version 5.12.2
    perl5121delta	Perl changes in version 5.12.1
    perl5120delta	Perl changes in version 5.12.0
    perl5101delta	Perl changes in version 5.10.1
    perl5100delta	Perl changes in version 5.10.0
    perl589delta	Perl changes in version 5.8.9
    perl588delta	Perl changes in version 5.8.8
    perl587delta	Perl changes in version 5.8.7
    perl586delta	Perl changes in version 5.8.6
    perl585delta	Perl changes in version 5.8.5
    perl584delta	Perl changes in version 5.8.4
    perl583delta	Perl changes in version 5.8.3
    perl582delta	Perl changes in version 5.8.2
    perl581delta	Perl changes in version 5.8.1
    perl58delta 	Perl changes in version 5.8.0
    perl561delta	Perl changes in version 5.6.1
    perl56delta 	Perl changes in version 5.6
    perl5005delta	Perl changes in version 5.005
    perl5004delta	Perl changes in version 5.004

    perlexperiment	A listing of experimental features in Perl

    perlartistic	Perl Artistic License
    perlgpl		GNU General Public License

=head2 Language-Specific

=for buildtoc flag +r

    perlcn		Perl for Simplified Chinese (in EUC-CN)
    perljp		Perl for Japanese (in EUC-JP)
    perlko		Perl for Korean (in EUC-KR)
    perltw		Perl for Traditional Chinese (in Big5)

=head2 Platform-Specific

    perlaix		Perl notes for AIX
    perlamiga		Perl notes for AmigaOS
    perlbs2000		Perl notes for POSIX-BC BS2000
    perlce		Perl notes for WinCE
    perlcygwin		Perl notes for Cygwin
    perldgux		Perl notes for DG/UX
    perldos		Perl notes for DOS
    perlfreebsd 	Perl notes for FreeBSD
    perlhaiku		Perl notes for Haiku
    perlhpux		Perl notes for HP-UX
    perlhurd		Perl notes for Hurd
    perlirix		Perl notes for Irix
    perllinux		Perl notes for Linux
    perlmacos		Perl notes for Mac OS (Classic)
    perlmacosx		Perl notes for Mac OS X
    perlnetware 	Perl notes for NetWare
    perlopenbsd 	Perl notes for OpenBSD
    perlos2		Perl notes for OS/2
    perlos390		Perl notes for OS/390
    perlos400		Perl notes for OS/400
    perlplan9		Perl notes for Plan 9
    perlqnx		Perl notes for QNX
    perlriscos		Perl notes for RISC OS
    perlsolaris 	Perl notes for Solaris
    perlsymbian 	Perl notes for Symbian
    perltru64		Perl notes for Tru64
    perlvms		Perl notes for VMS
    perlvos		Perl notes for Stratus VOS
    perlwin32		Perl notes for Windows

=for buildtoc flag -r

=head2 Stubs for Deleted Documents

    perlboot		
    perlbot		
    perltodo
    perltooc		
    perltoot		

=for buildtoc __END__

On a Unix-like system, these documentation files will usually also be
available as manpages for use with the F<man> program.

Some documentation is not available as man pages, so if a
cross-reference is not found by man, try it with L<perldoc>.  Perldoc can
also take you directly to documentation for functions (with the B<-f>
switch). See C<perldoc --help> (or C<perldoc perldoc> or C<man perldoc>)
for other helpful options L<perldoc> has to offer.

In general, if something strange has gone wrong with your program and you're
not sure where you should look for help, try making your code comply with
B<use strict> and B<use warnings>.  These will often point out exactly
where the trouble is.

=head1 DESCRIPTION

Perl officially stands for Practical Extraction and Report Language,
except when it doesn't.

Perl was originally a language optimized for scanning arbitrary
text files, extracting information from those text files, and printing
reports based on that information.  It quickly became a good language
for many system management tasks. Over the years, Perl has grown into
a general-purpose programming language. It's widely used for everything
from quick "one-liners" to full-scale application development.

The language is intended to be practical (easy to use, efficient,
complete) rather than beautiful (tiny, elegant, minimal).  It combines
(in the author's opinion, anyway) some of the best features of B<sed>,
B<awk>, and B<sh>, making it familiar and easy to use for Unix users to
whip up quick solutions to annoying problems.  Its general-purpose
programming facilities support procedural, functional, and
object-oriented programming paradigms, making Perl a comfortable
language for the long haul on major projects, whatever your bent.

Perl's roots in text processing haven't been forgotten over the years.
It still boasts some of the most powerful regular expressions to be
found anywhere, and its support for Unicode text is world-class.  It
handles all kinds of structured text, too, through an extensive
collection of extensions.  Those libraries, collected in the CPAN,
provide ready-made solutions to an astounding array of problems.  When
they haven't set the standard themselves, they steal from the best
-- just like Perl itself.

=head1 AVAILABILITY

Perl is available for most operating systems, including virtually
all Unix-like platforms.  See L<perlport/"Supported Platforms">
for a listing.

=head1 ENVIRONMENT

See L<perlrun>.

=head1 AUTHOR

Larry Wall <larry@wall.org>, with the help of oodles of other folks.

If your Perl success stories and testimonials may be of help to others 
who wish to advocate the use of Perl in their applications, 
or if you wish to simply express your gratitude to Larry and the 
Perl developers, please write to perl-thanks@perl.org .

=head1 FILES

 "@INC"			locations of perl libraries

=head1 SEE ALSO

 http://www.perl.org/       the Perl homepage
 http://www.perl.com/       Perl articles (O'Reilly)
 http://www.cpan.org/       the Comprehensive Perl Archive
 http://www.pm.org/         the Perl Mongers

=head1 DIAGNOSTICS

Using the C<use strict> pragma ensures that all variables are properly
declared and prevents other misuses of legacy Perl features.

The C<use warnings> pragma produces some lovely diagnostics. One can
also use the B<-w> flag, but its use is normally discouraged, because
it gets applied to all executed Perl code, including that not under
your control.

See L<perldiag> for explanations of all Perl's diagnostics.  The C<use
diagnostics> pragma automatically turns Perl's normally terse warnings
and errors into these longer forms.

Compilation errors will tell you the line number of the error, with an
indication of the next token or token type that was to be examined.
(In a script passed to Perl via B<-e> switches, each
B<-e> is counted as one line.)

Setuid scripts have additional constraints that can produce error
messages such as "Insecure dependency".  See L<perlsec>.

Did we mention that you should definitely consider using the B<use warnings>
pragma?

=head1 BUGS

The behavior implied by the B<use warnings> pragma is not mandatory.

Perl is at the mercy of your machine's definitions of various
operations such as type casting, atof(), and floating-point
output with sprintf().

If your stdio requires a seek or eof between reads and writes on a
particular stream, so does Perl.  (This doesn't apply to sysread()
and syswrite().)

While none of the built-in data types have any arbitrary size limits
(apart from memory size), there are still a few arbitrary limits:  a
given variable name may not be longer than 251 characters.  Line numbers
displayed by diagnostics are internally stored as short integers,
so they are limited to a maximum of 65535 (higher numbers usually being
affected by wraparound).

You may mail your bug reports (be sure to include full configuration
information as output by the myconfig program in the perl source
tree, or by C<perl -V>) to perlbug@perl.org .  If you've succeeded
in compiling perl, the L<perlbug> script in the F<utils/> subdirectory
can be used to help mail in a bug report.

Perl actually stands for Pathologically Eclectic Rubbish Lister, but
don't tell anyone I said that.

=head1 NOTES

The Perl motto is "There's more than one way to do it."  Divining
how many more is left as an exercise to the reader.

The three principal virtues of a programmer are Laziness,
Impatience, and Hubris.  See the Camel Book for why.

